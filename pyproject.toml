[project]
name = "meetup_bot"
version = "1.2.0"
description = "Use Meetup Pro API to send Slack messages before events occur."
authors = [
    {name = "pythoninthegrass", email = "4097471+pythoninthegrass@users.noreply.github.com"},
]
license = {text = "Unlicense"}
dependencies = [
    "arrow<2.0.0,>=1.3.0",
    "bcrypt==4.0.1",
    "colorama<1.0.0,>=0.4.5",
    "cryptography>=44.0.1,<45.0.0",
    "fastapi>=0.115.6",
    "gunicorn<24.0.0,>=23.0.0",
    "icecream<3.0.0,>=2.1.3",
    "Jinja2<4.0.0,>=3.1.5",
    "python-jose[cryptography]<4.0.0,>=3.4.0",
    "pandas<3.0.0,>=2.2.3",
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "pony<1.0.0,>=0.7.16",
    "psycopg2-binary<3.0.0,>=2.9.10",
    "PyJWT[crypto]<3.0.0,>=2.10.1",
    "python-decouple<4.0,>=3.8",
    "python-multipart>=0.0.20",
    "requests<3.0.0,>=2.32.3",
    "requests-cache<2.0.0,>=1.2.1",
    "slack-sdk<4.0.0,>=3.34.0",
    "uvicorn<1.0.0,>=0.29.0",
    "wheel<1.0.0,>=0.43.0",
]
requires-python = ">=3.11,<3.12"

[project.optional-dependencies]
dev = [
    "deptry>=0.23.0",
    "ipython<9.0.0,>=8.31.0",
    "playwright<2.0.0,>=1.49.1",
    "pyclean<4.0.0,>=3.0.0",
    "rich<14.0.0,>=13.9.4",
    "ruff>=0.9.6",
]
test = [
    "pytest<9.0.0,>=8.3.4",
    "pytest-asyncio<1.0.0,>=0.24.0",
    "pytest-cov<6.0.0,>=5.0.0",
    "pytest-datafiles<4.0.0,>=3.0.0",
    "pytest-xdist<4.0.0,>=3.6.1",
    "requests-mock<2.0.0,>=1.12.1",
]

[tool.deptry]
# DEP001: contains missing dependencies
# DEP003: transitive deps
ignore = [
    "DEP001",
    "DEP003",
]

[tool.deptry.per_rule_ignores]
# DEP002: not used in codebase (excluding dev deps)
DEP002 = [
    "bcrypt",
    "deptry",
    "gunicorn",
    "ipython",
    "Jinja2",
    "mypy",
    "pyclean",
    "psycopg2-binary",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-datafiles",
    "pytest-xdist",
    "python-multipart",
    "requests-mock",
    "rich",
    "ruff",
    "uvicorn",
    "wheel",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=app --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/__init__.py",
    "*/capture_groups.py",
    "*/config.py",
    "*/scratch.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.ruff]
# Fix without reporting on leftover violations
fix-only = true

# Enumerate all fixed violations
show-fixes = true

# Indent width (default: 4)
indent-width = 4

# Black (default: 88)
line-length = 130

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    "dist",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    "__pycache__",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.11
target-version = "py311"

[tool.ruff.format]
# Use spaces instead of tabs
indent-style = "space"

# Use `\n` line endings for all files
line-ending = "lf"

# Set quote style for strings
quote-style = "preserve"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = ["D203", "E203", "E251", "E266", "E401", "E402", "E501", "F401", "F403", "F405", "F841"]

# enable preview style formatting
preview = true

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TID", "TRY", "UP", "YTT"]

# unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
from-first = false
no-sections = true
order-by-type = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
