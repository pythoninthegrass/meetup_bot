# techlahoma SELF_ID (graphql playground)
query { self { id name } }

# recon
query {
	self {
		id
		name
		username
		memberUrl
	}
}

# THIS IS THE END MY FRIEND
query {
	self {
		id
		name
		username
		memberUrl
		upcomingEvents {
			count
			pageInfo {
				endCursor
			}
			edges {
				node {
					id
					title
					description
					dateTime
					eventUrl
					group {
						id
						name
						urlname
						link
						city
					}
				}
			}
		}
	}
}

#  events by query var
# {"eventId":"285533748"}
query($eventId: ID) {
	event(id: $eventId) {
		title
		description
		dateTime
		eventUrl
		group {
			id
			name
			proNetwork {
				id
			}
		}
	}
}

# search all events by group proNetwork id
# { "group": { "proNetwork": { "id": "364335959210266624" } } }
{ "id": "364335959210266624" }
query($id: ID!) {
	proNetwork(id: $id) {
		eventsSearch(filter: { status: UPCOMING }, input: { first: 25 }) {
			count
			pageInfo {
				endCursor
			}
			edges {
				node {
					id
					title
					description
					dateTime
					eventUrl
				}
			}
		}
	}
}

# search for non pro network group by urlname
{"urlname":"pythonistas"}
query($urlname: String!) {
	groupByUrlname(urlname: $urlname) {
		id
		description
		name
		urlname
		city
		link
		upcomingEvents(input: { first: 3 }) {
			count
			pageInfo {
				endCursor
			}
			edges {
				node {
					id
					title
					description
					dateTime
					eventUrl
					group {
						id
						name
						urlname
						link
						city
					}
				}
			}
		}
	}
}


# TODO: QA node ID == group ID
# I.e., https://www.meetup.com/find/?suggested=true&source=GROUPS&keywords=programming&categoryId=546&distance=tenMiles&location=us--ok--Oklahoma%20City
# query OKC area for programming groups' IDs
# NOTE: unable to use vars for lat/lon and source (enum: EVENTS/GROUPS)
{
	"query": "programming",
	"city": "Oklahoma City"
}
query ($query: String!, $city: String!) {
	keywordSearch(
		filter: {query: $query, lat: 35.467560, lon: -97.516426, city: $city, source: GROUPS}
	) {
		count
		pageInfo {
			endCursor
		}
		edges {
			node {
				id
			}
		}
	}
}

# TODO: if group ID is found, get events for that group; else, use `requests` to parse `urlname` from URL
